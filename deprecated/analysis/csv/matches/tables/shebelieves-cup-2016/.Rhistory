t <- createCleanDataFrame(c("assists", "second.assists", "key.passes", "key.assists", "unscored.key.passes"), "poss.notes", d)
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
#FUNCTIONS---------------
# 1.
## Function that takes a pattern and a column name
## The pattern will be the factors as well
createTable <- function(pattern, col, df) {
## Get event number for all events that have that pattern in the specified column
e <- df[df[,col] %in% c(pattern),"event"]
e <- paste0("^", e, "$")
## Go back to the original data frame and get all rows with an "event" number
## matching a value in the "e" vector
d2 <- df[grep(paste(e,collapse="|"), df[,"event"]),]
## Include only the rows with the pattern events (excludes defensive plays that added rows to an event)
d2 <- d2[d2[,col] %in% c(pattern),]
### Set factors, in case all events specified in the pattern don't show up, so that they show up in the table
d2[,col] <- factor(as.character(d2[,col]), levels=c(pattern))
## Create the table
t <- table(d2$poss.player, d2[,col])
t <- data.frame(unclass(t))
t <- cbind(Player=rownames(t), t)
rownames(t) <- NULL
t
}
# 2.
## Function that creates a data frame of only events that fit a certain pattern
createDataFrame <- function(pattern, col, df) {
## Get event number for all events that have that pattern in the specified column
e <- df[df[,col] %in% c(pattern),"event"]
## Add a "^" and "$" to each event value
e <- paste0("^", e, "$")
## Go back to original data frame and get all rows with an "event" value from e
df[grep(paste(e, collapse = "|"), df[,"event"]),]
}
# 3.
## Function that fills in blanks with values from above in specified columns that
## relate to the possessing player
fillBlanks <- function(df) {
x <- 1
while (x <= nrow(df)) {
if (is.na(df[x,"poss.player"])) {
df[x,c("poss.position", "poss.team", "poss.player", "poss.action",
"poss.location", "poss.play.destination", "play.type",
"poss.player.disciplinary", "poss.notes")] <- df[x-1,c("poss.position", "poss.team",
"poss.player", "poss.action",
"poss.location", "poss.play.destination",
"play.type", "poss.player.disciplinary",
"poss.notes")]
x <- x + 1
} else {
x <- x + 1
}
}
df
}
# 4.
## Adds column that fills in yes/no values based on qualifiers
addColumnForQualifier <- function (newcol, pattern, patternLocation, ogdf, ndf) {
ndf[,newcol] <- NA
x <- 1
while (x <= nrow(ndf)) {
e <- ndf[x,"event"]
v <- ogdf[ogdf[,"event"] == e,patternLocation]
if (grepl(pattern, paste(v, collapse = "|")) == TRUE) {
ndf[x,newcol] = "yes"
} else {
ndf[x,newcol] = "no"
}
x <- x + 1
}
ndf
}
# 5.
## Fills in blanks and then gets rid of duplicates. Is poss-focused
createCleanDataFrame <- function(pattern, col, df) {
t <- createDataFrame(pattern, col, df)
## Fills in blanks with info from cell above it
## Then, exclude anything that marks a stoppage in time
t <- fillBlanks(t)
t <- t[t[,"poss.action"] != "playcutoffbybroadcast",]
## Create the data.frame from which we will create the final table
## Takes only unique instances of "event" numbers
t <- t[!duplicated(t$event),c("event", "time","poss.position", "poss.team", "poss.player", "poss.action",
"poss.location", "poss.play.destination", "play.type",
"poss.player.disciplinary", "poss.notes")]
t
}
#MINUTES PLAYED & META DATA----------
## Gets data frame that binds data frames of every player who shows up in "poss.player" and "def.player" column
players <- rbind(data.frame(Player=unique(d$poss.player), Team=NA, MP=NA,GS=NA),data.frame(Player=unique(d$def.player), Team=NA, MP=NA,GS=NA))
players <- players[!is.na(players[,"Player"]),]
players <- unique(players[,])
matchlength <- length(unique(d$time))
substitutions <- d[grepl("substitution",d[,"poss.action"]),]
x <- 1
while (x <= nrow(players)) {
player <- as.character(players[x,"Player"])
#if they don't appear in the substitutions data frame, the player played the entire match
if (nrow(substitutions[substitutions[,"poss.player"] %in% player,]) == 0) {
players[x,"MP"] <- matchlength
players[x,"GS"] <- 1
} else if (nrow(substitutions[substitutions[,"poss.player"] %in% player,]) > 0) {
#check if she was a starter, based on if she was only ever substituted on
if ((substitutions[substitutions[,"poss.player"] == player,"poss.action"] %in% "substitution.on") == FALSE) {
#if she was a starter who was subbed off, get the length of unique values for vector d[,"time]
#up to where she got subbed off
e <- substitutions[substitutions[,"poss.player"] == player,"event"]
lastminute <- grep(e, d[,"event"])
minutesplayed <- length(unique(d[1:lastminute,"time"]))
players[x,"MP"] <- minutesplayed
players[x,"GS"] <- 1
} else
#if she wasn't a starter and got subbed on and wasn't also later subbed off
if ((substitutions[substitutions[,"poss.player"] == player,"poss.action"] %in% "substitution.on")
& !(substitutions[substitutions[,"poss.player"] == player,"poss.action"] %in% "substitution.off")){
#if she wasn't a starter, got subbed on, and was never subbed off, get the length of unique
#values for vector d[,"time] from when she got subbed on to when she got subbed off
e <- substitutions[substitutions[,"poss.player"] == player,"event"]
firstminute <- grep(e, d[,"event"])
minutesplayed <- length(unique(d[firstminute:nrow(d),"time"]))
players[x,"MP"] <- minutesplayed
players[x,"GS"] <- 0
} else
#if she wasn't a starter, got subbed on, and was later subbed off
if ((substitutions[substitutions[,"poss.player"] == player,"poss.action"] %in% "substitution.on")
& (substitutions[substitutions[,"poss.player"] == player,"poss.action"] %in% "substitution.off")) {
#if she wasn't a starter, got subbed on, and as later subbed off, get the length of unique
#values for vector d[,"time] from when she got subbed on to when she got subbed off
e <- substitutions[substitutions[,"poss.player"] == player,"event"]
firstminute <- grep(e[1], d[,"event"])
lastminute <- grep(e[2], d[,"event"])
minutesplayed <- length(unique(d[firstminute:lastminute,"time"]))
players[x,"MP"] <- minutesplayed
players[x,"GS"] <- 0
}
}
x <- x + 1
}
## Set team name
x <- 1
while (x <= nrow(players)) {
player <- as.character(players[x,"Player"])
playerteam <- unique(d[d[,"poss.player"] == player & !is.na(d[,"poss.player"]),"poss.team"])
if(length(playerteam) == 0) {
playerteam <- unique(d[d[,"def.player"] == player & !is.na(d[,"def.player"]),"def.team"])
}
players[x,"Team"] <- playerteam
x <- x + 1
}
#SHOTS---------------
## Creates table for players pased on types of shots.
t <- createTable(c("shots.scored", "shots", "accuracy", "shots.stopped.by.gk", "shots.stopped.by.def", "shots.missed") ,"poss.action", d)
## Add column adding all shot attempts
t$shots <- t$shots.scored + t$shots.stopped.by.gk + t$shots.stopped.by.def + t$shots.missed
## Add column for accuracy
t$accuracy <- (t$shots.scored + t$shots.stopped.by.gk + t$shots.stopped.by.def)/
(t$shots.scored + t$shots.stopped.by.gk + t$shots.stopped.by.def + t$shots.missed)
##Sort by "shots" and "accuracy"
t <- t[order(-t$shots, -t$accuracy),]
## Change names to be more readable
names(t) <- c("Player","Goals","Shots","Shot Accuracy","SOG GK Stop", "SOG Def Stop", "Shots Missed")
shots <- t
all <- merge(players, shots, by="Player", all=TRUE)
#SHOTS UNDER PRESSURE---------------
t <- createCleanDataFrame(c("shots", "accuracy", "shots.scored", "shots.stopped.by.gk",
"shots.stopped.by.def", "shots.missed") ,"poss.action", d)
## Adds column for whether shot is "pressured" or "challenged"
t <- addColumnForQualifier("pressured", "pressured", "def.action", d, t)
t <- addColumnForQualifier("challenged", "challenged", "def.action", d, t)
t$pressed <- NA
x <- 1
while(x <= nrow(t)) {
if (t[x,"pressured"] == "yes" | t[x,"challenged"] == "yes") {
t[x,"pressed"] <- "yes"
x <- x + 1
} else {
t[x,"pressed"] <- "no"
x <- x + 1
}
}
## Create table with a column for shots under and not under pressure
t2 <- createTable(c("yes", "pct", "total", "no"), "pressed", t)
## Add "total" and "pct" values
t2$total <- t2$yes + t2$no
t2$pct <- t2$yes/t2$total
# rename
t2 <- t2[,1:3]
t2 <- t2[order(-t2$yes),]
names(t2) <- c("Player","Shots Pressured", "Pct of Shots Pressured")
shotspressure <- t2
rm(t2, t)
all <- merge(all, shotspressure, by="Player", all=TRUE)
#SHOT LOCATION---------------
t <- createCleanDataFrame(c("shots", "accuracy", "shots.scored", "shots.stopped.by.gk", "shots.stopped.by.def", "shots.missed") ,
"poss.action", d)
## Creates table for shot.location
t2 <- createTable(c("A6", "A18", "A3L", "A3C", "A3R", "Beyond","AM3L", "AM3C",
"AM3R", "DM3L", "DM3C", "DM3R", "D3L", "D3C", "D3R",
"D18", "D6"), "poss.location", t)
## Add everything beyond the attacking 3rd and put it in the "Beyond" column
t2$beyond <- rowSums(t2[,8:18])
## Get rid of all columns after the "Beyond" column to save space
t2 <- t2[,1:7]
names(t2) <- c("Player", "A6 Shots", "A18 Shots", "A3L Shots", "A3C Shots", "A3R Shots", "Further Shots")
shotlocation <- t2
rm(t,t2)
all <- merge(all, shotlocation, by="Player", all=TRUE)
View(all)
t <- createCleanDataFrame(c("assists", "second.assists", "key.passes", "key.assists", "unscored.key.passes"), "poss.notes", d)
t <- addColumnForQualifier("assists", "assists", d, t)
View(addColumnForQualifier)
t <- createCleanDataFrame(c("assists", "second.assists", "key.passes", "key.assists", "unscored.key.passes"), "poss.notes", d)
t <- addColumnForQualifier("assists", "assists", "poss.notes", d, t)
t <- addColumnForQualifier("second.assists", "second.assists", "poss.notes", d, t)
t <- addColumnForQualifier("key.passes", "key.passes", "poss.notes", d, t)
t <- addColumnForQualifier("unscored.key.passes", "unscored.key.passes", "poss.notes", d, t)
View(t)
t <- t[,c("poss.player", "assists", "second.assists", "key.passes", "unscored.key.passes")]
View(t)
View(addColumnForQualifier)
shiny::runApp('Desktop/wosostats testbed/shiny/test')
shiny::runApp('Desktop/wosostats testbed/shiny/test')
shiny::runApp('Desktop/wosostats testbed/shiny/test')
shiny::runApp('Desktop/wosostats testbed/shiny/test')
shiny::runApp('Desktop/wosostats testbed/shiny/test')
shiny::runApp('Desktop/wosostats testbed/shiny/test')
shiny::runApp('Desktop/wosostats testbed/shiny/test')
shiny::runApp('Desktop/wosostats testbed/shiny/test')
shiny::runApp('Desktop/wosostats testbed/shiny/test')
shiny::runApp('Desktop/wosostats testbed/shiny/test')
reactive
shiny::runApp('Desktop/wosostats testbed/shiny/test')
shiny::runApp('Desktop/wosostats testbed/shiny/test')
shiny::runApp('Desktop/wosostats testbed/shiny/test')
shiny::runApp('Desktop/wosostats testbed/shiny/test')
shiny::runApp('Desktop/wosostats testbed/shiny/test')
library(RCurl)
meta <- getURL("https://raw.githubusercontent.com/amj2012/wosostats/master/database.csv")
meta <- read.csv(textConnection(meta), stringsAsFactors = FALSE)
View(meta)
meta[11,"stats.csv.link"]
d <- getURL("https://raw.githubusercontent.com/amj2012/wosostats/master/analysis/csv/matches/tables/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv")
d <- read.csv(textConnection(d), stringsAsFactors = FALSE)
is.num <- sapply(d, is.numeric)
d[is.num] <- lapply(d[is.num], round, 2)
shots <- d[,c("Player","Team","MP","GS","Goals","Shots","Shot.Accuracy","SOG.GK.Stop","SOG.Def.Stop","Shots.Missed","Shots.Pressured","Pct.of.Shots.Pressured","foo")]
[]
shots <- d[,c("Player","Team","MP","GS","Goals","Shots","Shot.Accuracy","SOG.GK.Stop","SOG.Def.Stop","Shots.Missed","Shots.Pressured","Pct.of.Shots.Pressured")]
View(shots)
shots <- d[,c("Player","Team","MP","GS","Goals","Shots","Shot.Accuracy","SOG.GK.Stop","SOG.Def.Stop","Shots.Missed","Shots.Pressured","Pct.of.Shots.Pressured","foo")]
shiny::runApp('Desktop/wosostats testbed/shiny/test')
shiny::runApp('Desktop/wosostats testbed/shiny/test')
shiny::runApp('Desktop/wosostats testbed/shiny/test')
?merge
?rbind
test <- data.frame(x = 1, y = 1:10, fac = fac)
test <- data.frame(x = 1, y = 1:10)
View(test)
test <- data.frame(x = NA, y = NA)
class(d$Player)
shots <- data.frame(
"Player"=character(0),
"Team"=character(0),
"MP"=character(0)
)
View(shots)
test2 <- rbind(shots, d)
View(shots)
shots <- data.frame(
"Player"=character(0),
"Team"=character(0),
"MP"=numeric(0),
"GS"=numeric(0),
"Goals"=numeric(0),
"Shots"=numeric(0),
"Shot.Accuracy"=numeric(0),
"SOG.GK.Stop"=numeric(0),
"SOG.Def.Stop"=numeric(0),
"Shots.Missed"=numeric(0),
"Shots.Pressured"=numeric(0),
"Pct.of.Shots.Pressured"=numeric(0)
)
View(shots)
test2 <- rbind(shots, d)
View(test2)
rbind
?rbind
test2 <- rbind(shots, d)
test2 <- rbind(d, shots)
test2 <- rbind(shots, d, by(c("Player","Team","MP","GS","Goals","Shots","Shot.Accuracy","SOG.GK.Stop","SOG.Def.Stop","Shots.Missed","Shots.Pressured","Pct.of.Shots.Pressured")))
test2 <- rbind(shots, d, by=(c("Player","Team","MP","GS","Goals","Shots","Shot.Accuracy","SOG.GK.Stop","SOG.Def.Stop","Shots.Missed","Shots.Pressured","Pct.of.Shots.Pressured")))
View(test2)
rm(test2)
test2 <- rbind(shots, d, by=(c("Player","Team","MP","GS","Goals","Shots","Shot.Accuracy","SOG.GK.Stop","SOG.Def.Stop","Shots.Missed","Shots.Pressured","Pct.of.Shots.Pressured")))
rm(test2)
test2 <- rbind(shots, d, by.x=(c("Player","Team","MP","GS","Goals","Shots","Shot.Accuracy","SOG.GK.Stop","SOG.Def.Stop","Shots.Missed","Shots.Pressured","Pct.of.Shots.Pressured")))
rm(test2)
test2 <- rbind(shots, d, by.y=(c("Player","Team","MP","GS","Goals","Shots","Shot.Accuracy","SOG.GK.Stop","SOG.Def.Stop","Shots.Missed","Shots.Pressured","Pct.of.Shots.Pressured")))
test2 <- rbind(d, test2, all=FALSE)
rm(test2)
test2 <- rbind(d, test2, all=FALSE)
test2 <- rbind(d, shots, all=FALSE)
setwd("~/Desktop/wosostats testbed/source/excel/shebelieves-cup-2016")
list.files()
match <- "shebelieves-cup-2016-eng-ger-030616.xlsx"
source('~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/code/version-2/tidy-excel.R', echo=TRUE)
View(df)
source('~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/code/version-2/tidy-excel.R', echo=TRUE)
source('~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/code/version-2/tidy-excel.R', echo=TRUE)
setwd("~/Desktop/wosostats testbed/source/csv/shebelieves-cup-2016")
match
write.csv(df, file ="shebelieves-cup-2016-eng-ger-030616", row.names = FALSE)
write.csv(df, file ="shebelieves-cup-2016-eng-ger-030616.csv", row.names = FALSE)
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/shebelieves-cup-2016/shebelieves-cup-2016-eng-ger-030616.csv"
#locationofmatchcsv must be a string
source('~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/code/version-2/creating-stats.R', echo=TRUE)
View(substitutions)
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/shebelieves-cup-2016/shebelieves-cup-2016-eng-ger-030616.csv"
#SOURCING---------------
library(plyr)
library(dplyr)
library(RCurl)
#locationofmatchcsv is the location on your computer or URL for the csv file with the logged match actions
#locationofmatchcsv must be a string
d <- getURL(matchURL)
d <- read.csv(textConnection(d), stringsAsFactors = FALSE)
#FUNCTIONS---------------
# 1.
## Function that takes a pattern and a column name
## The pattern will be the factors as well
createTable <- function(pattern, col, df) {
## Get event number for all events that have that pattern in the specified column
e <- df[df[,col] %in% c(pattern),"event"]
e <- paste0("^", e, "$")
## Go back to the original data frame and get all rows with an "event" number
## matching a value in the "e" vector
d2 <- df[grep(paste(e,collapse="|"), df[,"event"]),]
## Include only the rows with the pattern events (excludes defensive plays that added rows to an event)
d2 <- d2[d2[,col] %in% c(pattern),]
### Set factors, in case all events specified in the pattern don't show up, so that they show up in the table
d2[,col] <- factor(as.character(d2[,col]), levels=c(pattern))
## Create the table
t <- table(d2$poss.player, d2[,col])
t <- data.frame(unclass(t))
t <- cbind(Player=rownames(t), t)
rownames(t) <- NULL
t
}
# 2.
## Function that creates a data frame of only events that fit a certain pattern
createDataFrame <- function(pattern, col, df) {
## Get event number for all events that have that pattern in the specified column
e <- df[df[,col] %in% c(pattern),"event"]
## Add a "^" and "$" to each event value
e <- paste0("^", e, "$")
## Go back to original data frame and get all rows with an "event" value from e
df[grep(paste(e, collapse = "|"), df[,"event"]),]
}
# 3.
## Function that fills in blanks with values from above in specified columns that
## relate to the possessing player
fillBlanks <- function(df) {
x <- 1
while (x <= nrow(df)) {
#Fill in all player info
if (is.na(df[x,"poss.player"])) {
df[x,c("poss.position", "poss.team", "poss.player", "poss.action",
"poss.location", "poss.play.destination")] <- df[x-1,c("poss.position", "poss.team",
"poss.player", "poss.action",
"poss.location", "poss.play.destination")]
}
x <- x + 1
}
df
}
# 4.
## Adds column that fills in yes/no values based on qualifiers
addColumnForQualifier <- function (newcol, pattern, patternLocation, ogdf, ndf) {
ndf[,newcol] <- NA
x <- 1
while (x <= nrow(ndf)) {
e <- ndf[x,"event"]
v <- ogdf[ogdf[,"event"] == e,patternLocation]
if (grepl(pattern, paste(v, collapse = "|")) == TRUE) {
ndf[x,newcol] = "yes"
} else {
ndf[x,newcol] = "no"
}
x <- x + 1
}
ndf
}
# 5.
## Fills in blanks and then gets rid of duplicates. Is poss-focused
createCleanDataFrame <- function(pattern, col, df) {
t <- createDataFrame(pattern, col, df)
## Fills in blanks with info from cell above it
## Then, exclude anything that marks a stoppage in time
t <- fillBlanks(t)
t <- t[t[,"poss.action"] != "playcutoffbybroadcast",]
## Create the data.frame from which we will create the final table
## Takes only unique instances of "event" numbers
t <- t[!duplicated(t$event),c("event", "time","poss.position", "poss.team", "poss.player", "poss.action",
"poss.location", "poss.play.destination", "play.type",
"poss.player.disciplinary", "poss.notes")]
t
}
players <- rbind(data.frame(Player=unique(d$poss.player), Team=NA, MP=NA,GS=NA),data.frame(Player=unique(d$def.player), Team=NA, MP=NA,GS=NA))
View(players)
players <- players[!is.na(players[,"Player"]),]
players <- unique(players[,])
View(players)
matchlength <- length(unique(d$time))
substitutions <- d[grepl("substitution",d[,"poss.action"]),]
View(substitutions)
x <- 1
while (x <= nrow(players)) {
player <- as.character(players[x,"Player"])
#if they don't appear in the substitutions data frame, the player played the entire match
if (nrow(substitutions[substitutions[,"poss.player"] %in% player,]) == 0) {
players[x,"MP"] <- matchlength
players[x,"GS"] <- 1
} else if (nrow(substitutions[substitutions[,"poss.player"] %in% player,]) > 0) {
#check if she was a starter, based on if she was only ever substituted on
if ((substitutions[substitutions[,"poss.player"] == player,"poss.action"] %in% "substitution.on") == FALSE) {
#if she was a starter who was subbed off, get the length of unique values for vector d[,"time]
#up to where she got subbed off
e <- substitutions[substitutions[,"poss.player"] == player,"event"]
lastminute <- grep(e, d[,"event"])
minutesplayed <- length(unique(d[1:lastminute,"time"]))
players[x,"MP"] <- minutesplayed
players[x,"GS"] <- 1
} else
#if she wasn't a starter and got subbed on and wasn't also later subbed off
if ((substitutions[substitutions[,"poss.player"] == player,"poss.action"] %in% "substitution.on")
& !(substitutions[substitutions[,"poss.player"] == player,"poss.action"] %in% "substitution.off")){
#if she wasn't a starter, got subbed on, and was never subbed off, get the length of unique
#values for vector d[,"time] from when she got subbed on to when she got subbed off
e <- substitutions[substitutions[,"poss.player"] == player,"event"]
firstminute <- grep(e, d[,"event"])
minutesplayed <- length(unique(d[firstminute:nrow(d),"time"]))
players[x,"MP"] <- minutesplayed
players[x,"GS"] <- 0
} else
#if she wasn't a starter, got subbed on, and was later subbed off
if ((substitutions[substitutions[,"poss.player"] == player,"poss.action"] %in% "substitution.on")
& (substitutions[substitutions[,"poss.player"] == player,"poss.action"] %in% "substitution.off")) {
#if she wasn't a starter, got subbed on, and as later subbed off, get the length of unique
#values for vector d[,"time] from when she got subbed on to when she got subbed off
e <- substitutions[substitutions[,"poss.player"] == player,"event"]
firstminute <- grep(e[1], d[,"event"])
lastminute <- grep(e[2], d[,"event"])
minutesplayed <- length(unique(d[firstminute:lastminute,"time"]))
players[x,"MP"] <- minutesplayed
players[x,"GS"] <- 0
}
}
x <- x + 1
}
View(players)
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/shebelieves-cup-2016/shebelieves-cup-2016-eng-ger-030616.csv"
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/shebelieves-cup-2016/shebelieves-cup-2016-eng-ger-030616.csv"
source('~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/code/version-2/creating-stats.R', echo=TRUE)
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/shebelieves-cup-2016/shebelieves-cup-2016-eng-ger-030616.csv"
source('~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/code/version-2/creating-stats.R', echo=TRUE)
View(all)
View(d)
setwd("~/Desktop/wosostats testbed/analysis/csv/matches/tables/shebelieves-cup-2016")
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/shebelieves-cup-2016/shebelieves-cup-2016-eng-ger-030616.csv"
source('~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/code/version-2/creating-stats.R', echo=TRUE)
View(all)
setwd("~/Desktop/wosostats testbed/analysis/csv/matches/tables/shebelieves-cup-2016")
write.csv(all, file="shebelieves-cup-2016-eng-ger-030616.csv", row.names = FALSE)
list.files()
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/shebelieves-cup-2016/shebelieves-cup-2016-usa-fra-030616.csv"
source('~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/code/version-2/creating-stats.R', echo=TRUE)
View(all)
list.files()
write.csv(all, file="shebelieves-cup-2016-usa-fra-030616.csv", row.names = FALSE)
shiny::runApp('~/Desktop/wosostats testbed/shiny/wosostats')
shiny::runApp('~/Desktop/wosostats testbed/shiny/wosostats')
View(d)
shiny::runApp('~/Desktop/wosostats testbed/shiny/wosostats')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
library(RCurl)
meta <- getURL("https://raw.githubusercontent.com/amj2012/wosostats/master/database.csv")
meta <- read.csv(textConnection(meta), stringsAsFactors = FALSE)
View(meta)
league <- "shebelieves-cup-2016"
matchups <- meta[meta[,"competition.slug"] == league,"matchup"]
dates <- meta[meta[,"competition.slug"] == league,"date"]
links <- meta[meta[,"competition.slug"] == league,"stats.csv.link"]
names(links) <- paste(matchups, dates)
links
d <- getURL("https://raw.githubusercontent.com/amj2012/wosostats/master/analysis/csv/matches/tables/shebelieves-cup-2016/shebelieves-cup-2016-usa-ger-030916.csv")
d <- read.csv(textConnection(d), stringsAsFactors = FALSE)
is.num <- sapply(d, is.numeric)
d[is.num] <- lapply(d[is.num], round, 2)
View(d)
dtransposed <- t(d)
View(dtransposed)
?t
colnames(dtransposed) <- dtransposed[1,]
View(dtransposed)
class(dtransposed)
dtransposed <- dtransposed[-1,]
View(dtransposed)
dtransposed <- as.data.frame(dtransposed)
View(dtransposed)
class(d[,1])
class(d[1,])
