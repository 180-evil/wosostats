rm(t)
all <- merge(all, bigchances, by="Player", all=TRUE)
rm(bigchances)
#CROSSES---------------
t <- createCleanDataFrame(c("corner.crosses", "deep.crosses"), "play.type", d)
## Create table with columns for completed, blocked, and missed crosses
t2 <- createTable(c("completed", "pct", "attempts", "passes.f.c", "passes.f",
"passes.s.c", "passes.s"), "poss.action", t)
## Calculate empty columns
t2$completed <- t2$passes.f.c + t2$passes.s.c
t2$attempts <- rowSums(t2[,5:8])
t2$pct <- t2$completed/t2$attempts
t2 <- t2[,1:4]
## Create table with columns for corner and deep crosses
t3 <- createTable(c("corner.crosses", "deep.crosses"), "play.type", t)
# Merge the two sets of columns
t4 <- cbind(t2, t3)
t4 <- t4[,c(1:4,6,7)]
t4 <- t4[order(-t4$completed, -t4$pct, t4$attempts),]
names(t4) <- c("Player","Crosses Completed", "Cross Comp Pct", "Cross Attempts", "Crosses from Corner", "Crosses from Far")
crosses <- t4
print(t4, digits=2)
rm(t2, t3, t4)
all <- merge(all, crosses, by=1, all=TRUE)
rm(crosses)
#THROUGH BALS---------------
t <- createCleanDataFrame(c("through"), "play.type", d)
## Create table
t2 <- createTable(c("completed", "pct", "attempts", "passes.f.c", "passes.f"), "poss.action", t)
## Calculate empty columns
t2$completed <- t2$passes.f.c
t2$attempts <- rowSums(t2[,5:6])
t2$pct <- t2$completed/t2$attempts
t2 <- t2[,1:4]
t2 <- t2[order(-t2$completed, -t2$pct, t2$attempts),]
names(t2) <- c("Player","Through Balls Completed", "Through Ball Pct", "Through Ball Attempts")
through <- t2
print(t2, digits=2)
all <- merge(all, through, by=1, all=TRUE)
rm(t2, through)
#OVERALL PASSING---------------
t <- createCleanDataFrame(c("passes.f.c", "passes.f",
"passes.s.c", "passes.s", "passes.b.c", "passes.b"), "poss.action", d)
##add qualifiers for being pressed and challenged
t <- addColumnForQualifier("pressured", "pressured", "def.action", d, t)
t <- addColumnForQualifier("challenged", "challenged", "def.action", d, t)
t$pressed <- NA
x <- 1
while(x <= nrow(t)) {
if (t[x,"pressured"] == "yes" | t[x,"challenged"] == "yes") {
t[x,"pressed"] <- "yes"
x <- x + 1
} else {
t[x,"pressed"] <- "no"
x <- x + 1
}
}
##add qualifiers for forward, sideways, and backward pass attemps & completions
t <- addColumnForQualifier("forward.pass", "^passes.f", "poss.action", d, t)
t <- addColumnForQualifier("sideways.pass", "^passes.s", "poss.action", d, t)
t <- addColumnForQualifier("backward.pass", "^passes.b", "poss.action", d, t)
##create overall passing table
t2 <- createTable(c("completed", "pct", "attempts" , "passes.f.c", "passes.f",
"passes.s.c", "passes.s", "passes.b.c",
"passes.b"), "poss.action", t)
## Calculate blank columns & then get rid of excess
t2$attempts <- rowSums(t2[,c(5:10)])
t2$completed <- rowSums(t2[,c(5,7,9)])
t2$pct <- t2$completed/t2$attempts
t2 <- t2[,1:4]
# Order
t2 <- t2[order(-t2$pct, -t2$completed),]
names(t2) <- c("Player","Passes Completed", "Pass Comp Pct", "Pass Attempts")
overallpassing <- t2
rm(t2)
all <- merge(all, overallpassing, by=1, all=TRUE)
rm(overallpassing)
#OVERALL PASSING BY DIRECTION---------------
#Cut down d data.frame to three different ones for forward, sideways, and backwards passes
fwdpasses <- t[t[,"forward.pass"] == "yes",]
sidepasses <- t[t[,"sideways.pass"] == "yes",]
backpasses <- t[t[,"backward.pass"] == "yes",]
##Creates blank table with columns for direction distribution
directiondist <- createTable(c("PctPassAttFwd", "PctPassAttSide", "PctPassAttBack", "yes", "no"), "pressed", t)
directiondist <- directiondist[,1:4]
##Create a table for completions, attempts, and comp pct for FORWARD passes
fwdtab <- createTable(c("FwdPassComp", "FwdPassAtt", "FwdPassCompPct" ,"passes.f", "passes.f.c"), "poss.action", fwdpasses)
fwdtab$FwdPassComp <- fwdtab$passes.f.c
fwdtab$FwdPassAtt <- fwdtab$passes.f + fwdtab$passes.f.c
fwdtab$FwdPassCompPct <- fwdtab$FwdPassComp/fwdtab$FwdPassAtt
fwdtab <- fwdtab[,1:4]
passdirection <- merge(directiondist, fwdtab, by="Player", all=TRUE)
rm(directiondist, fwdtab, fwdpasses)
##Create a table for completions, attempts, and comp pct for SIDEWAYS passes
sidetab <- createTable(c("SidePassComp", "SidePassAtt", "SidePassCompPct" ,"passes.s", "passes.s.c"), "poss.action", sidepasses)
sidetab$SidePassComp <- sidetab$passes.s.c
sidetab$SidePassAtt <- sidetab$passes.s + sidetab$passes.s.c
sidetab$SidePassCompPct <- sidetab$SidePassComp/sidetab$SidePassAtt
sidetab <- sidetab[,1:4]
passdirection <- merge(passdirection, sidetab, by="Player", all=TRUE)
rm(sidetab, sidepasses)
##Create a table for completions, attempts, and comp pct for BACKWARDS passes
backtab <- createTable(c("BackPassComp", "BackPassAtt", "BackPassCompPct" ,"passes.b", "passes.b.c"), "poss.action", backpasses)
backtab$BackPassComp <- backtab$passes.b.c
backtab$BackPassAtt <- backtab$passes.b + backtab$passes.b.c
backtab$BackPassCompPct <- backtab$BackPassComp/backtab$BackPassAtt
backtab <- backtab[,1:4]
passdirection <- merge(passdirection, backtab, by="Player", all=TRUE)
rm(backtab, backpasses)
##Calculate direction distribution
passdirection[is.na(passdirection)] <- 0
passdirection$PctPassAttFwd <- passdirection$FwdPassAtt/rowSums(passdirection[,c("FwdPassAtt", "SidePassAtt", "BackPassAtt")])
passdirection$PctPassAttSide <- passdirection$SidePassAtt/rowSums(passdirection[,c("FwdPassAtt", "SidePassAtt", "BackPassAtt")])
passdirection$PctPassAttBack <- passdirection$BackPassAtt/rowSums(passdirection[,c("FwdPassAtt", "SidePassAtt", "BackPassAtt")])
all <- merge(all, passdirection, by="Player", all=TRUE)
rm(passdirection)
#PASSING UNDER PRESSURE---------------
## Include only passing attempts under pressure
t2 <- t[t[,"pressed"] == "yes",]
## Create table
t2 <- createTable(c("Completed", "Comp Pct","Attempts", "passes.f.c", "passes.f",
"passes.s.c", "passes.s", "passes.b.c",
"passes.b"), "poss.action", t2)
## Fill in blank columns and sort
t2[,"Completed"] <- rowSums(t2[,c("passes.f.c","passes.s.c","passes.b.c")])
t2[,"Attempts"] <- rowSums(t2[,5:10])
t2[,"Comp.Pct"] <- t2[,"Completed"]/t2[,"Attempts"]
t2 <- t2[,1:4]
## Create a table comparing how many passes were under pressure
t3 <- createTable(c("Pct of Passes", "yes", "no"), "pressed", t)
## Add "total" and "pct" values
t3[,"Pct.of.Passes"] <- t3$yes/(t3$yes + t3$no)
## Exclude rows with 0% passes under pressure
t3 <- t3[t3[,"Pct.of.Passes"] != 0,]
## Merge columns
t4 <- cbind(t2,t3)
t4 <- t4[,c(1:4,6:8)]
t4 <- t4[order(-t4[,"Comp.Pct"],-t4[,"Completed"],  -t4[,"Pct.of.Passes"]),]
t4 <- t4[,c("Player","Pct.of.Passes", "Completed", "Comp.Pct","Attempts")]
names(t4) <- c("Player", "Pct of Passes Under Pressure", "Passes Completed Under Pressure",
"Pass Comp Pct Under Pressure", "Pass Attempts Under Pressure")
passespressure <- t4
print(t4, digits=2)
rm(t2, t3, t4)
all <- merge(all, passespressure, by="Player", all=TRUE)
rm(passespressure)
#PASSING UNDER PRESSURE BY DIRECTION---------------
##Cut down d data.frame to three different ones for forward, sideways, and backwards passes
##All under pressure
fwdpasses <- t[t[,"forward.pass"] == "yes" & t[,"pressed"] == "yes",]
sidepasses <- t[t[,"sideways.pass"] == "yes" & t[,"pressed"] == "yes",]
backpasses <- t[t[,"backward.pass"] == "yes" & t[,"pressed"] == "yes",]
##Creates blank table with columns for direction distribution
directiondist <- createTable(c("Pct PressedPassAtt Fwd", "Pct PressedPassAtt Side", "Pct PressedPassAtt Back", "yes"), "pressed", t)
directiondist <- directiondist[,1:4]
##Create a table for completions, attempts, and comp pct for FORWARD passes
fwdtab <- createTable(c("FwdPass Comp", "FwdPass Att", "FwdPass Comp Pct" ,"passes.f", "passes.f.c"), "poss.action", fwdpasses)
fwdtab$FwdPass.Comp <- fwdtab$passes.f.c
fwdtab$FwdPass.Att <- fwdtab$passes.f + fwdtab$passes.f.c
fwdtab$FwdPass.Comp.Pct <- fwdtab$FwdPass.Comp/fwdtab$FwdPass.Att
fwdtab <- fwdtab[,1:4]
passdirection <- merge(directiondist, fwdtab, by="Player", all=TRUE)
rm(directiondist, fwdtab, fwdpasses)
##Create a table for completions, attempts, and comp pct for SIDEWAYS passes
sidetab <- createTable(c("SidePass Comp", "SidePass Att", "SidePass Comp Pct" ,"passes.s", "passes.s.c"), "poss.action", sidepasses)
sidetab$SidePass.Comp <- sidetab$passes.s.c
sidetab$SidePass.Att <- sidetab$passes.s + sidetab$passes.s.c
sidetab$SidePass.Comp.Pct <- sidetab$SidePass.Comp/sidetab$SidePass.Att
sidetab <- sidetab[,1:4]
passdirection <- merge(passdirection, sidetab, by="Player", all=TRUE)
rm(sidetab, sidepasses)
##Create a table for completions, attempts, and comp pct for BACKWARDS passes
backtab <- createTable(c("BackPass Comp", "BackPass Att", "BackPass Comp Pct" ,"passes.b", "passes.b.c"), "poss.action", backpasses)
backtab$BackPass.Comp <- backtab$passes.b.c
backtab$BackPass.Att <- backtab$passes.b + backtab$passes.b.c
backtab$BackPass.Comp.Pct <- backtab$BackPassComp/backtab$BackPassAtt
backtab <- backtab[,1:4]
passdirection <- merge(passdirection, backtab, by="Player", all=TRUE)
rm(backtab, backpasses)
##Calculate direction distribution
passdirection[is.na(passdirection)] <- 0
passdirection$Pct.PressedPassAtt.Fwd <- passdirection$FwdPass.Att/rowSums(passdirection[,c("FwdPass.Att", "SidePass.Att", "BackPass.Att")])
passdirection$Pct.PressedPassAtt.Side <- passdirection$SidePass.Att/rowSums(passdirection[,c("FwdPass.Att", "SidePass.Att", "BackPass.Att")])
passdirection$Pct.PressedPassAtt.Back <- passdirection$BackPass.Att/rowSums(passdirection[,c("FwdPass.Att", "SidePass.Att", "BackPass.Att")])
all <- merge(all, passdirection, by="Player", all=TRUE)
rm(passdirection)
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
#OVERALL PASSING BY DIRECTION---------------
#Cut down d data.frame to three different ones for forward, sideways, and backwards passes
fwdpasses <- t[t[,"forward.pass"] == "yes",]
sidepasses <- t[t[,"sideways.pass"] == "yes",]
backpasses <- t[t[,"backward.pass"] == "yes",]
##Creates blank table with columns for direction distribution
directiondist <- createTable(c("PctPassAttFwd", "PctPassAttSide", "PctPassAttBack", "yes", "no"), "pressed", t)
directiondist <- directiondist[,1:4]
##Create a table for completions, attempts, and comp pct for FORWARD passes
fwdtab <- createTable(c("FwdPassComp", "FwdPassAtt", "FwdPassCompPct" ,"passes.f", "passes.f.c"), "poss.action", fwdpasses)
fwdtab$FwdPassComp <- fwdtab$passes.f.c
fwdtab$FwdPassAtt <- fwdtab$passes.f + fwdtab$passes.f.c
fwdtab$FwdPassCompPct <- fwdtab$FwdPassComp/fwdtab$FwdPassAtt
fwdtab <- fwdtab[,1:4]
passdirection <- merge(directiondist, fwdtab, by="Player", all=TRUE)
rm(directiondist, fwdtab, fwdpasses)
##Create a table for completions, attempts, and comp pct for SIDEWAYS passes
sidetab <- createTable(c("SidePassComp", "SidePassAtt", "SidePassCompPct" ,"passes.s", "passes.s.c"), "poss.action", sidepasses)
sidetab$SidePassComp <- sidetab$passes.s.c
sidetab$SidePassAtt <- sidetab$passes.s + sidetab$passes.s.c
sidetab$SidePassCompPct <- sidetab$SidePassComp/sidetab$SidePassAtt
sidetab <- sidetab[,1:4]
passdirection <- merge(passdirection, sidetab, by="Player", all=TRUE)
rm(sidetab, sidepasses)
##Create a table for completions, attempts, and comp pct for BACKWARDS passes
backtab <- createTable(c("BackPassComp", "BackPassAtt", "BackPassCompPct" ,"passes.b", "passes.b.c"), "poss.action", backpasses)
backtab$BackPassComp <- backtab$passes.b.c
backtab$BackPassAtt <- backtab$passes.b + backtab$passes.b.c
backtab$BackPassCompPct <- backtab$BackPassComp/backtab$BackPassAtt
backtab <- backtab[,1:4]
passdirection <- merge(passdirection, backtab, by="Player", all=TRUE)
rm(backtab, backpasses)
##Calculate direction distribution
passdirection[is.na(passdirection)] <- 0
passdirection$PctPassAttFwd <- passdirection$FwdPassAtt/rowSums(passdirection[,c("FwdPassAtt", "SidePassAtt", "BackPassAtt")])
passdirection$PctPassAttSide <- passdirection$SidePassAtt/rowSums(passdirection[,c("FwdPassAtt", "SidePassAtt", "BackPassAtt")])
passdirection$PctPassAttBack <- passdirection$BackPassAtt/rowSums(passdirection[,c("FwdPassAtt", "SidePassAtt", "BackPassAtt")])
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/2016-olympic-qualifiers-concacaf/2016-olympic-qualifiers-concacaf-usa-tri-021916.csv"
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
View(backpasses)
View(backtab)
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/2016-olympic-qualifiers-concacaf/2016-olympic-qualifiers-concacaf-usa-tri-021916.csv"
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/2016-olympic-qualifiers-concacaf/2016-olympic-qualifiers-concacaf-usa-tri-021916.csv"
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
setwd("~/Desktop/wosostats testbed/source/excel/shebelieves-cup-2016")
list.files()
match <- "shebelieves-cup-usa-eng-030316.xlsx"
source('~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/code/version-2/tidy-excel.R', echo=TRUE)
setwd("~/Desktop/wosostats testbed/source/excel/shebelieves-cup-2016")
match <- "shebelieves-cup-2016-usa-eng-030316.xlsx"
source('~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/code/version-2/tidy-excel.R', echo=TRUE)
match <- "shebelieves-cup-2016-usa-eng-030316.xlsx"
source('~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/code/version-2/tidy-excel.R', echo=TRUE)
View(df)
match <- "shebelieves-cup-2016-usa-eng-030316.xlsx"
getwd()
source('~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/code/version-2/tidy-excel.R', echo=TRUE)
View(df)
setwd("~/Desktop/wosostats testbed/source/csv/shebelieves-cup-2016")
write.csv(df, file="shebelieves-cup-2016-usa-eng-030316.csv", row.names = FALSE)
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv"
source('~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/code/version-2/creating-stats.R', echo=TRUE)
View(all)
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv"
source('~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/code/version-2/creating-stats.R', echo=TRUE)
View(all)
setwd("~/Desktop/wosostats testbed/analysis/csv/matches/tables/shebelieves-cup-2016")
write.csv(all, file="shebelieves-cup-2016-usa-eng-030316.csv", row.names = FALSE)
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv"
source('~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/code/version-2/creating-stats.R', echo=TRUE)
View(all)
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv"
source('~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/code/version-2/creating-stats.R', echo=TRUE)
View(all)
setwd("~/Desktop/wosostats testbed/analysis/csv/matches/tables/shebelieves-cup-2016")
list.files()
write.csv(all, file="shebelieves-cup-2016-usa-eng-030316.csv", row.names = FALSE)
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/analysis/csv/matches/tables/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv"
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv"
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
View(all)
setwd("~/Desktop/wosostats testbed/analysis/csv/matches/tables/shebelieves-cup-2016")
list.files()
write.csv(all, file="shebelieves-cup-2016-usa-eng-030316.csv", row.names = FALSE)
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
names(all)
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
d <- getURL("https://raw.githubusercontent.com/amj2012/wosostats/master/analysis/csv/matches/tables/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv")
d <- read.csv(textConnection(d), stringsAsFactors = FALSE)
is.num <- sapply(d, is.numeric)
d[is.num] <- lapply(d[is.num], round, 2)
View(d)
shots <- d[,c("Player", "Team", "MP", "GS", "Goals","Shots", "Shot Accuracy","SOG.GK.Stop","SOG.Def.Stop","Shots.Missed","Shots.Pressured","Pct.of.Shots.Pressured")]
names(shots) <- gsub("\\."," ", names(shots))
shots <- d[,c("Player", "Team", "MP", "GS", "Goals","Shots", "Shot Accuracy","SOG.GK.Stop","SOG.Def.Stop","Shots.Missed","Shots.Pressured","Pct.of.Shots.Pressured")]
View(d)
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
goalkeeping <- d[,c("Player","Team","MP","Saves","Goals.Allowed","High.Balls.Won","High.Balls.Lost",
"High.Balls.Caught","High.Balls.Punched.Away","High.Balls.Parried","High.Balls.Collected",
"High.Ball.Fouls.Won","Crosses.High.Balls.Won","Corner.Kick.High.Ball.Won",
"Free.Kick.High.Balls.Won","Smothers.Won","Smothers.Lost")]
names(goalkeeping) <- gsub("\\."," ", names(goalkeeping))
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
d <- getURL("https://raw.githubusercontent.com/amj2012/wosostats/master/analysis/csv/matches/tables/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv")
d <- read.csv(textConnection(d), stringsAsFactors = FALSE)
is.num <- sapply(d, is.numeric)
d[is.num] <- lapply(d[is.num], round, 2)
names(d) <- gsub("", ".", names(d))
View(d)
d <- getURL("https://raw.githubusercontent.com/amj2012/wosostats/master/analysis/csv/matches/tables/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv")
d <- read.csv(textConnection(d), stringsAsFactors = FALSE)
is.num <- sapply(d, is.numeric)
d[is.num] <- lapply(d[is.num], round, 2)
names(d) <- gsub(" ", ".", names(d))
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv"
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
View(all)
setwd("~/Desktop/wosostats testbed/analysis/csv/matches/tables/shebelieves-cup-2016")
list.files()
write.csv(all, file="shebelieves-cup-2016-usa-eng-030316.csv", row.names = FALSE)
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
d <- getURL("https://raw.githubusercontent.com/amj2012/wosostats/master/analysis/csv/matches/tables/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv")
d <- read.csv(textConnection(d), stringsAsFactors = FALSE)
is.num <- sapply(d, is.numeric)
d[is.num] <- lapply(d[is.num], round, 2)
goalkeeping <- d[,c("Player","Team","MP","Saves","Goals.Allowed","High.Balls.Won","High.Balls.Lost",
"High.Balls.Caught","High.Balls.Punched.Away","High.Balls.Parried","High.Balls.Collected",
"High.Ball.Fouls.Won","Crosses.High.Balls.Won","Corner.Kick.High.Ball.Won",
"Free.Kick.High.Balls.Won","Smothers.Won","Smothers.Lost")]
d[,c("Player","Team","MP","Saves","Goals.Allowed","High.Balls.Won","High.Balls.Lost",
"High.Balls.Caught","High.Balls.Punched.Away","High.Balls.Parried","High.Balls.Collected",
"High.Ball.Fouls.Won","Crosses.High.Balls.Won","Corner.Kick.High.Ball.Won",
"Free.Kick.High.Balls.Won","Smothers.Won","Smothers.Lost")]
View(d)
names(d)
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv"
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
View(all)
list.files()
write.csv(all, file="shebelieves-cup-2016-usa-eng-030316.csv", row.names = FALSE)
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
d <- getURL("https://raw.githubusercontent.com/amj2012/wosostats/master/analysis/csv/matches/tables/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv")
d <- read.csv(textConnection(d), stringsAsFactors = FALSE)
is.num <- sapply(d, is.numeric)
d[is.num] <- lapply(d[is.num], round, 2)
#Passes by Direction
directionpassing <- d[,c("Player","Team","MP","Pct.of.Pass.Att.Fwd","Pct.of.Pass.Att.Side","Pct.of.Pass.Att.Back","Fwd.Pass.Comp",
"Fwd.Pass.Att","Fwd.Pass.Comp.Pct","Side.Pass.Comp","Side.Pass.Att","Side.Pass.Comp.Pct",
"Back.Pass.Comp","Back.Pass.Att","Back.Pass.Comp.Pct")]
names(directionpassing) <- gsub("\\."," ", names(directionpassing))
directionpassing <- d[,c("Player","Team","MP","Pct.of.Pass.Att.Fwd","Pct.of.Pass.Att.Side","Pct.of.Pass.Att.Back","Fwd.Pass.Comp",
"Fwd.Pass.Att","Fwd.Pass.Comp.Pct","Side.Pass.Comp","Side.Pass.Att","Side.Pass.Comp.Pct",
"Back.Pass.Comp","Back.Pass.Att","Back.Pass.Comp.Pct")]
directionpassing <- d[,c("Player","Team","MP","Pct.of.Pass.Att.Fwd")]
directionpassing <- d[,c("Player","Team","MP","Pct.of.Pass.Att.Fwd","Pct.of.Pass.Att.Side")]
directionpassing <- d[,c("Player","Team","MP","Pct.of.Pass.Att.Fwd","Pct.of.Pass.Att.Side","Pct.of.Pass.Att.Back")]
directionpassing <- d[,c("Player","Team","MP","Pct.of.Pass.Att.Fwd","Pct.of.Pass.Att.Side","Pct.of.Pass.Att.Back","Fwd.Pass.Comp")]
directionpassing <- d[,c("Player","Team","MP","Pct.of.Pass.Att.Fwd","Pct.of.Pass.Att.Side","Pct.of.Pass.Att.Back","Fwd.Pass.Comp",
"Fwd.Pass.Att","Fwd.Pass.Comp.Pct","Side.Pass.Comp","Side.Pass.Att","Side.Pass.Comp.Pct",
"Back.Pass.Comp","Back.Pass.Att","Back.Pass.Comp.Pct")]
directionpassing <- d[,c("Player","Team","MP","Pct.of.Pass.Att.Fwd","Pct.of.Pass.Att.Side","Pct.of.Pass.Att.Back","Fwd.Pass.Comp",
"Fwd.Pass.Att","Fwd.Pass.Comp.Pct","Side.Pass.Comp","Side.Pass.Att","Side.Pass.Comp.Pct",
"Back.Pass.Comp","Back.Pass.Att")]
directionpassing <- d[,c("Player","Team","MP","Pct.of.Pass.Att.Fwd","Pct.of.Pass.Att.Side","Pct.of.Pass.Att.Back","Fwd.Pass.Comp","Fwd.Pass.Att","Fwd.Pass.Comp.Pct","Side.Pass.Comp","Side.Pass.Att","Side.Pass.Comp.Pct","Back.Pass.Att")]
directionpassing <- d[,c("Player","Team","MP","Pct.of.Pass.Att.Fwd","Pct.of.Pass.Att.Side","Pct.of.Pass.Att.Back","Fwd.Pass.Comp",
"Fwd.Pass.Att","Fwd.Pass.Comp.Pct","Side.Pass.Comp","Side.Pass.Att","Side.Pass.Comp.Pct",
"Back.Pass.Comp","Back.Pass.Att")]
directionpassing <- d[,c("Player","Team","MP","Pct.of.Pass.Att.Fwd","Pct.of.Pass.Att.Side","Pct.of.Pass.Att.Back","Fwd.Pass.Comp",
"Fwd.Pass.Att","Fwd.Pass.Comp.Pct","Side.Pass.Comp","Side.Pass.Att","Side.Pass.Comp.Pct",
"Back.Pass.Comp")]
directionpassing <- d[,c("Player","Team","MP","Pct.of.Pass.Att.Fwd","Pct.of.Pass.Att.Side","Pct.of.Pass.Att.Back","Fwd.Pass.Comp",
"Fwd.Pass.Att","Fwd.Pass.Comp.Pct","Side.Pass.Comp","Side.Pass.Att","Side.Pass.Comp.Pct"]
directionpassing <- d[,c("Player","Team","MP","Pct.of.Pass.Att.Fwd","Pct.of.Pass.Att.Side","Pct.of.Pass.Att.Back","Fwd.Pass.Comp",
"Fwd.Pass.Att","Fwd.Pass.Comp.Pct","Side.Pass.Comp","Side.Pass.Att","Side.Pass.Comp.Pct")]
directionpassing <- d[,c("Player","Team","MP","Pct.of.Pass.Att.Fwd","Pct.of.Pass.Att.Side","Pct.of.Pass.Att.Back","Fwd.Pass.Comp",
"Fwd.Pass.Att","Fwd.Pass.Comp.Pct","Side.Pass.Comp","Side.Pass.Att")]
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv"
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
setwd("~/Desktop/wosostats testbed/analysis/csv/matches/tables/shebelieves-cup-2016")
list.files()
write.csv(all, file="shebelieves-cup-2016-usa-eng-030316.csv", row.names = FALSE)
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
d <- getURL("https://raw.githubusercontent.com/amj2012/wosostats/master/analysis/csv/matches/tables/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv")
d <- read.csv(textConnection(d), stringsAsFactors = FALSE)
is.num <- sapply(d, is.numeric)
d[is.num] <- lapply(d[is.num], round, 2)
directionpressuredpassing <- d[,c("Player","Team","MP","Pct.of.Pressed.Pass.Att.Fwd","Pct.of.Pressed.Pass.Att.Side","Pct.of.Pressed.Pass.Att.Back",
"Fwd.Pressed.Pass.Comp","Fwd.Pressed.Pass.Att","Fwd.Pressed.Pass.Comp.Pct","Side.Pressed.Pass.Comp",
"Side.Pressed.Pass.Att","Side.Pressed.Pass.Comp.Pct","Back.Pressed.Pass.Comp","Back.Pressed.Pass.Att",
"Back.Pressed.Pass.Comp.Pct")]
directionpressuredpassing <- d[,c("Player","Team","MP","Pct.of.Pressed.Pass.Att.Fwd","Pct.of.Pressed.Pass.Att.Side","Pct.of.Pressed.Pass.Att.Back",
"Fwd.Pressed.Pass.Comp","Fwd.Pressed.Pass.Att","Fwd.Pressed.Pass.Comp.Pct","Side.Pressed.Pass.Comp",
"Side.Pressed.Pass.Att","Side.Pressed.Pass.Comp.Pct","Back.Pressed.Pass.Comp","Back.Pressed.Pass.Att",)]
directionpressuredpassing <- d[,c("Player","Team","MP","Pct.of.Pressed.Pass.Att.Fwd","Pct.of.Pressed.Pass.Att.Side","Pct.of.Pressed.Pass.Att.Back",
"Fwd.Pressed.Pass.Comp","Fwd.Pressed.Pass.Att","Fwd.Pressed.Pass.Comp.Pct","Side.Pressed.Pass.Comp",
"Side.Pressed.Pass.Att","Side.Pressed.Pass.Comp.Pct","Back.Pressed.Pass.Comp","Back.Pressed.Pass.Att",
"Back.Pressed.Pass.Comp.Pct")]
directionpressuredpassing <- d[,c("Player","Team","MP","Pct.of.Pressed.Pass.Att.Fwd","Pct.of.Pressed.Pass.Att.Side","Pct.of.Pressed.Pass.Att.Back",
"Fwd.Pressed.Pass.Comp","Fwd.Pressed.Pass.Att","Fwd.Pressed.Pass.Comp.Pct","Side.Pressed.Pass.Comp",
"Side.Pressed.Pass.Att","Side.Pressed.Pass.Comp.Pct","Back.Pressed.Pass.Comp","Back.Pressed.Pass.Att")]
directionpressuredpassing <- d[,c("Player","Team","MP","Pct.of.Pressed.Pass.Att.Fwd","Pct.of.Pressed.Pass.Att.Side","Pct.of.Pressed.Pass.Att.Back",
"Fwd.Pressed.Pass.Comp","Fwd.Pressed.Pass.Att","Fwd.Pressed.Pass.Comp.Pct","Side.Pressed.Pass.Comp",
"Side.Pressed.Pass.Att","Side.Pressed.Pass.Comp.Pct","Back.Pressed.Pass.Comp",
"Back.Pressed.Pass.Comp.Pct")]
directionpressuredpassing <- d[,c("Player","Team","MP","Pct.of.Pressed.Pass.Att.Fwd","Pct.of.Pressed.Pass.Att.Side","Pct.of.Pressed.Pass.Att.Back",
"Fwd.Pressed.Pass.Comp","Fwd.Pressed.Pass.Att","Fwd.Pressed.Pass.Comp.Pct","Side.Pressed.Pass.Comp",
"Side.Pressed.Pass.Att","Side.Pressed.Pass.Comp.Pct",
"Back.Pressed.Pass.Comp.Pct")]
directionpressuredpassing <- d[,c("Player","Team","MP","Pct.of.Pressed.Pass.Att.Fwd","Pct.of.Pressed.Pass.Att.Side","Pct.of.Pressed.Pass.Att.Back",
"Fwd.Pressed.Pass.Comp","Fwd.Pressed.Pass.Att","Fwd.Pressed.Pass.Comp.Pct","Side.Pressed.Pass.Comp",
"Side.Pressed.Pass.Att",
"Back.Pressed.Pass.Comp.Pct")]
directionpressuredpassing <- d[,c("Player","Team","MP","Pct.of.Pressed.Pass.Att.Fwd","Pct.of.Pressed.Pass.Att.Side","Pct.of.Pressed.Pass.Att.Back",
"Fwd.Pressed.Pass.Comp","Fwd.Pressed.Pass.Att","Fwd.Pressed.Pass.Comp.Pct","Side.Pressed.Pass.Comp",
"Back.Pressed.Pass.Comp.Pct")]
directionpressuredpassing <- d[,c("Player","Team","MP","Pct.of.Pressed.Pass.Att.Fwd","Pct.of.Pressed.Pass.Att.Side","Pct.of.Pressed.Pass.Att.Back",
"Fwd.Pressed.Pass.Comp","Fwd.Pressed.Pass.Att","Fwd.Pressed.Pass.Comp.Pct",
"Back.Pressed.Pass.Comp.Pct")]
directionpressuredpassing <- d[,c("Player","Team","MP","Pct.of.Pressed.Pass.Att.Fwd","Pct.of.Pressed.Pass.Att.Side","Pct.of.Pressed.Pass.Att.Back",
"Fwd.Pressed.Pass.Comp","Fwd.Pressed.Pass.Att",
"Back.Pressed.Pass.Comp.Pct")]
directionpressuredpassing <- d[,c("Player","Team","MP","Pct.of.Pressed.Pass.Att.Fwd","Pct.of.Pressed.Pass.Att.Side","Pct.of.Pressed.Pass.Att.Back",
"Fwd.Pressed.Pass.Comp",
"Back.Pressed.Pass.Comp.Pct")]
directionpressuredpassing <- d[,c("Player","Team","MP","Pct.of.Pressed.Pass.Att.Fwd","Pct.of.Pressed.Pass.Att.Side","Pct.of.Pressed.Pass.Att.Back",
"Back.Pressed.Pass.Comp.Pct")]
directionpressuredpassing <- d[,c("Player","Team","MP","Pct.of.Pressed.Pass.Att.Fwd","Pct.of.Pressed.Pass.Att.Side",
"Back.Pressed.Pass.Comp.Pct")]
directionpressuredpassing <- d[,c("Player","Team","MP","Pct.of.Pressed.Pass.Att.Fwd",
"Back.Pressed.Pass.Comp.Pct")]
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/shebelieves-cup-2016/shebelieves-cup-2016-usa-eng-030316.csv"
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
list.files()
write.csv(all, file="shebelieves-cup-2016-usa-eng-030316.csv", row.names = FALSE)
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
setwd("~/Google Drive/Advanced Soccer Metrics - NWSL/GitHub Clones/wosostats/source/csv/2016-olympic-qualifiers-concacaf")
list.files()
matchURL <- "2016-olympic-qualifiers-concacaf-usa-tri-021916.csv"
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/2016-olympic-qualifiers-concacaf/2016-olympic-qualifiers-concacaf-usa-tri-021916.csv"
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
View(all)
setwd("~/Desktop/wosostats testbed/analysis/csv/matches/tables/2016-olympic-qualifiers-concacaf")
setwd("~/Desktop/wosostats testbed/analysis/csv/matches/tables/2016-olympic-qualifiers-concacaf")
View(all)
write.csv(all, file="2016-olympic-qualifiers-concacaf-usa-tri-021916.csv", row.names = FALSE)
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/2016-olympic-qualifiers-concacaf/2016-olympic-qualifiers-concacaf-usa-can-022116.csv"
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
write.csv(all, file="2016-olympic-qualifiers-concacaf-usa-can-022116.csv", row.names = FALSE)
View(all)
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/2016-olympic-qualifiers-concacaf/2016-olympic-qualifiers-concacaf-usa-crc-021016.csv"
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
write.csv(all, file="2016-olympic-qualifiers-concacaf-usa-crc-021016.csv", row.names = FALSE)
View(all)
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/2016-olympic-qualifiers-concacaf/2016-olympic-qualifiers-concacaf-usa-mex-021316.csv"
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
View(addColumnForQualifier)
View(all)
View(t)
t <- addColumnForQualifier("assists", "assists", "poss.notes", d, t)
View(addColumnForQualifier)
newcol <- "assists"
pattern <- ""assists""
pattern <- "assists"
View(addColumnForQualifier)
patternLocation <- "poss.notes"
ogdf <- d
df <- t
View(addColumnForQualifier)
rm(df)
ndf <- t
View(ndf)
t <- createCleanDataFrame(c("assists", "second.assists", "key.passes", "key.assists", "unscored.key.passes"), "poss.notes", d)
View(addColumnForQualifier)
View(d)
View(ndf)
View(createCleanDataFrame)
View(createDataFrame)
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/2016-olympic-qualifiers-concacaf/2016-olympic-qualifiers-concacaf-usa-mex-021316.csv"
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
View(all)
list.files()
write.csv(all, file="2016-olympic-qualifiers-concacaf-usa-mex-021316.csv", row.names = FALSE)
matchURL <- "https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/2016-olympic-qualifiers-concacaf/2016-olympic-qualifiers-concacaf-usa-pur-021516.csv"
source('~/Desktop/wosostats testbed/code/version-2/creating-stats.R', echo=TRUE)
View(all)
list.files()
write.csv(all, file="2016-olympic-qualifiers-concacaf-usa-pur-021516.csv", row.names = FALSE)
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
shiny::runApp('~/Desktop/wosostats testbed/shiny/test')
