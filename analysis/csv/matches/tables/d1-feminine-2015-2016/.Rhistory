}
}
x <- x + 1
}
x
df[x, "event"]
is.na(df[x, "poss.location"])
!is.na(df[x, "poss.location"])
!is.na(df[x, "poss.location"])
x
df[x, "poss.location"]
!is.na(df[x, "poss.location"])
if(!is.na(df[x, "poss.location"])) {
# find location of poss.player
location <- df[df[,"event"] == df[x,"event"],"poss.location"][1]
# assign the opposite as "def.location"
df[x,"def.location"] <- opposites[as.character(opposites[,"posslocations"]) == as.character(location),"deflocations"]
}
## if "poss.location" is an NA, we can't determine the blank "def.location" value
else {
paste(x, "has an NA poss.location value")
}
if(!is.na(df[x, "poss.location"])) {
# find location of poss.player
location <- df[df[,"event"] == df[x,"event"],"poss.location"][1]
# assign the opposite as "def.location"
df[x,"def.location"] <- opposites[as.character(opposites[,"posslocations"]) == as.character(location),"deflocations"]
}
## if "poss.location" is an NA, we can't determine the blank "def.location" value
else {
paste(x, "has an NA poss.location value")
}
!is.na(df[x, "poss.location"])
if(!is.na(df[x, "poss.location"])) {
# find location of poss.player
location <- df[df[,"event"] == df[x,"event"],"poss.location"][1]
# assign the opposite as "def.location"
df[x,"def.location"] <- opposites[as.character(opposites[,"posslocations"]) == as.character(location),"deflocations"]
}
## if "poss.location" is an NA, we can't determine the blank "def.location" value
else if (is.na(df[x, "poss.location"])){
paste(x, "has an NA poss.location value")
}
## Goes down the entire data.frame, row by row, and fills in blank "def.location" cells
x <- 1
while (x <= nrow(df)) {
## checks if "def.location" is NA for actions that can have their location determined
## based on the inverse of certain actions from opposing players
if (is.na(df[x,"def.location"])) {
col <- "def.action"
if (actionIsInvertible(x, col)) {
## Check if "poss.location is filled in
if(!is.na(df[x, "poss.location"])) {
# find location of poss.player
location <- df[df[,"event"] == df[x,"event"],"poss.location"][1]
# assign the opposite as "def.location"
df[x,"def.location"] <- opposites[as.character(opposites[,"posslocations"]) == as.character(location),"deflocations"]
}
## if "poss.location" is an NA, we can't determine the blank "def.location" value
else if (is.na(df[x, "poss.location"])) {
paste(x, "has an NA poss.location value")
}
}
## checks if "def.location" is blank for interceptions, which can have its location
## determined based on location of next action, which is by definition by the intercepting
## player at the location of the interception
else if (grepl("interceptions", df[x,"def.action"])) {
# find location of next poss.player
e <- df[x,"event"][1]
ne <- e + 1
location <- df[df[,"event"] == df[ne,"event"],"poss.location"][1]
# assign it as the "def.location"
df[x,"def.location"] <- location
}
## Otherwise, NA values "def.location" can't be determined
else {
paste(x, "can't be determined")
}
}
x <- x + 1
}
print(paste(x, "can't be determined"))
x <- 1
while (x <= nrow(df)) {
## checks if "def.location" is NA for actions that can have their location determined
## based on the inverse of certain actions from opposing players
if (is.na(df[x,"def.location"])) {
col <- "def.action"
if (actionIsInvertible(x, col)) {
## Check if "poss.location is filled in
if(!is.na(df[x, "poss.location"])) {
# find location of poss.player
location <- df[df[,"event"] == df[x,"event"],"poss.location"][1]
# assign the opposite as "def.location"
df[x,"def.location"] <- opposites[as.character(opposites[,"posslocations"]) == as.character(location),"deflocations"]
}
## if "poss.location" is an NA, we can't determine the blank "def.location" value
else if (is.na(df[x, "poss.location"])) {
paste(x, "has an NA poss.location value")
}
}
## checks if "def.location" is blank for interceptions, which can have its location
## determined based on location of next action, which is by definition by the intercepting
## player at the location of the interception
else if (grepl("interceptions", df[x,"def.action"])) {
# find location of next poss.player
e <- df[x,"event"][1]
ne <- e + 1
location <- df[df[,"event"] == df[ne,"event"],"poss.location"][1]
# assign it as the "def.location"
df[x,"def.location"] <- location
}
## Otherwise, NA values "def.location" can't be determined
else {
print(paste(x, "can't be determined"))
}
}
x <- x + 1
}
## Goes down the entire data.frame, row by row, and fills in blank "def.location" cells
x <- 1
while (x <= nrow(df)) {
## checks if "def.location" is NA for actions that can have their location determined
## based on the inverse of certain actions from opposing players
if (is.na(df[x,"def.location"])) {
col <- "def.action"
if (actionIsInvertible(x, col)) {
## Check if "poss.location is filled in
if(!is.na(df[x, "poss.location"])) {
# find location of poss.player
location <- df[df[,"event"] == df[x,"event"],"poss.location"][1]
# assign the opposite as "def.location"
df[x,"def.location"] <- opposites[as.character(opposites[,"posslocations"]) == as.character(location),"deflocations"]
}
## if "poss.location" is an NA, we can't determine the blank "def.location" value
else if (is.na(df[x, "poss.location"])) {
paste(x, "has an NA poss.location value")
}
}
## checks if "def.location" is blank for interceptions, which can have its location
## determined based on location of next action, which is by definition by the intercepting
## player at the location of the interception
else if (grepl("interceptions", df[x,"def.action"])) {
# find location of next poss.player
e <- df[x,"event"][1]
ne <- e + 1
location <- df[df[,"event"] == df[ne,"event"],"poss.location"][1]
# assign it as the "def.location"
df[x,"def.location"] <- location
}
## Otherwise, NA values "def.location" can't be determined
else {
print(paste0(x, "'s defensive location can't be determined"))
}
}
x <- x + 1
}
## Goes down the entire data.frame, row by row, and fills in blank "def.location" cells
x <- 1
while (x <= nrow(df)) {
## checks if "def.location" is NA for actions that can have their location determined
## based on the inverse of certain actions from opposing players
if (is.na(df[x,"def.location"])) {
col <- "def.action"
if (actionIsInvertible(x, col)) {
## Check if "poss.location is filled in
if(!is.na(df[x, "poss.location"])) {
# find location of poss.player
location <- df[df[,"event"] == df[x,"event"],"poss.location"][1]
# assign the opposite as "def.location"
df[x,"def.location"] <- opposites[as.character(opposites[,"posslocations"]) == as.character(location),"deflocations"]
}
## if "poss.location" is an NA, we can't determine the blank "def.location" value
else if (is.na(df[x, "poss.location"])) {
paste(x, "has an NA poss.location value")
}
}
## checks if "def.location" is blank for interceptions, which can have its location
## determined based on location of next action, which is by definition by the intercepting
## player at the location of the interception
else if (grepl("interceptions", df[x,"def.action"])) {
# find location of next poss.player
e <- df[x,"event"][1]
ne <- e + 1
location <- df[df[,"event"] == df[ne,"event"],"poss.location"][1]
# assign it as the "def.location"
df[x,"def.location"] <- location
}
## Otherwise, NA values "def.location" can't be determined
else {
print(paste0(x, "'s defensive location can't be determined. poss.location is NA"))
}
}
x <- x + 1
}
class(df$poss.action)
df$poss.action <- as.character(df$poss.action)
e <- 1
while (e <= max(df$event)) {
# get row for "poss.action" for "event"
row <- grep(e,df[,"event"])[1]
# get event value and row for "poss.action" for next event
nextevent <- e + 1
nextrow <- grep(nextevent,df[,"event"])[1]
# checks these conditions which must be fulfilled for the pass attempt to be a completed pass
if(
# checks if the event is a pass attempt
grepl("pass", df[df[,"event"] == e,"poss.action"][1]) &&
# checks if the "poss.play.destination" value is blank and needs to be filled
is.na(df[row,"poss.play.destination"]) &&
# checks if the next event isn't a stop in play or break in broadcast
# these instances should have the "poss.play.destination" value filled in anyways
!grepl("playcutoffbybroadcast|offside|stoppage|
substitution|halftime|fulltime|end.of", df[nextrow,"poss.action"]) &&
# checks if next event isn't a lost aerial duel
!grepl("aerial.lost", df[nextrow, "poss.action"]) &&
# checks if next event, which shouldn't be a lost aerial duel, has the same team as the possessing team
df[row,"poss.team"] == df[nextrow,"poss.team"] &&
# if the above conditions are satisfied, check "def.action" to make sure it does not
# include defensive actions that would still indicate an unsuccessful pass attempt
!grepl("interceptions|blocks|clearances|shield|high.balls.won|smothers.won|loose.balls.won", df[df[,"event"] == e,"def.action"])
)
# if the previous test is passed, then it's a completed pass! Now, to determine the destination of the pass
{
# use location from the next event as
# the poss.play.destination value
df[row,"poss.play.destination"] <- df[nextrow, "poss.location"]
# one last thing, add a ".c" to the end of the "poss.action" value to signify that it's a completed pass
string <- df[row,"poss.action"]
df[row,"poss.action"] <- paste0(string, ".c")
# move on to the next event
e <- e + 1
}
# if the previous test is not passed, then the event is not a completed pass
# move on to the next event
else {
e <- e + 1
}
}
"pass", df[df[,"event"] == e,"poss.action"][1]
grepl("pass", df[df[,"event"] == e,"poss.action"][1])
is.na(df[row,"poss.play.destination"])
## Functions for reading and tidying up a raw Excel file of match stats
## and turning it into a data.frame in your environment
##
## Save the file into your working directory by running read.csv(df, file="filenamegoeshere.csv", row.names=FALSE)
## Install if necessary
require(xlsx)
## IMPORTANT: "match" must be set as a string value, or this won't work
## Might take a while to create. Takes about two minutes. Hold tight.
## The Excel file must be in the working directory
df <- read.xlsx(match, sheetName = "match")
## Delete all rows before kickoff and saves them in a separate data frame "head"
### Gets the row number where the match starts, stores it in x
start <- grep("kickoff", df[,"poss.action"])
### Creates a data frame of all columns from row 1 to row x, for reference
ref <- df[1:(start-1),]
### Then, deletes everything before kickoff from the df data.frame
df <- df[start:nrow(df),]
### Changes select column factors to integers
df$event <- as.integer(as.character(df[,"event"]))
### Gets rid of all those "-" and "" and turn them into NAs
df[(df) == "-"] <- NA
df[(df) == ""] <- NA
rm(start)
## There are a lot of blank spaces where the team acronym should be. The code below fills them in
### Creates a vector for the "home" team and the "away" team
teams <- as.character(unique(ref$poss.team))
hometeam <- teams[1]
awayteam <- teams[2]
### Creates two different vectors from each team's list of players
homeplayers <- as.character(ref[ref[,"poss.team"] == hometeam,"poss.player"])
awayplayers <- as.character(ref[ref[,"poss.team"] == awayteam,"poss.player"])
### Uses the above vectors & values to check df rows where "poss.team" and "def.team"
### is blank, and fills in the appropriate value based on what the player name is in
### "poss.player" or "def.player"
df[grepl(paste(paste0("^", homeplayers, "$"), collapse ="|"), df[,"poss.player"]), "poss.team"] <- hometeam
df[grepl(paste(paste0("^", awayplayers, "$"), collapse ="|"), df[,"poss.player"]), "poss.team"] <- awayteam
df[grepl(paste(paste0("^", homeplayers, "$"), collapse ="|"), df[,"def.player"]), "def.team"] <- hometeam
df[grepl(paste(paste0("^", awayplayers, "$"), collapse ="|"), df[,"def.player"]), "def.team"] <- awayteam
rm(ref)
## Create data frame with opposites of each location
posslocations <- c("A6", "A18", "A3L", "A3C", "A3R", "AM3L", "AM3C",
"AM3R", "DM3L", "DM3C", "DM3R", "D3L", "D3C", "D3R",
"D18", "D6")
deflocations <- c("D6", "D18", "D3R", "D3C", "D3L", "DM3R", "DM3C",
"DM3L", "AM3R", "AM3C", "AM3L", "A3R", "A3C", "A3L",
"A18", "A6")
opposites <- data.frame(posslocations, deflocations)
##Function to determine if an action's location is invertible based on the
##location of certain opposing players' action
actionIsInvertible <- function(action, col) {
grepl("pressure|challenge|aerial|tackle|dispossess|dribble|pass|move|take|shots",df[action, col])
}
## Goes down the entire data.frame, row by row, and fills in blank "def.location" cells
x <- 1
while (x <= nrow(df)) {
## checks if "def.location" is NA for actions that can have their location determined
## based on the inverse of certain actions from opposing players
if (is.na(df[x,"def.location"])) {
col <- "def.action"
if (actionIsInvertible(x, col)) {
## Check if "poss.location is filled in
if(!is.na(df[x, "poss.location"])) {
# find location of poss.player
location <- df[df[,"event"] == df[x,"event"],"poss.location"][1]
# assign the opposite as "def.location"
df[x,"def.location"] <- opposites[as.character(opposites[,"posslocations"]) == as.character(location),"deflocations"]
}
## if "poss.location" is an NA, we can't determine the blank "def.location" value
else if (is.na(df[x, "poss.location"])) {
paste(x, "has an NA poss.location value")
}
}
## checks if "def.location" is blank for interceptions, which can have its location
## determined based on location of next action, which is by definition by the intercepting
## player at the location of the interception
else if (grepl("interceptions", df[x,"def.action"])) {
# find location of next poss.player
e <- df[x,"event"][1]
ne <- e + 1
location <- df[df[,"event"] == df[ne,"event"],"poss.location"][1]
# assign it as the "def.location"
df[x,"def.location"] <- location
}
## Otherwise, NA values "def.location" can't be determined
else {
print(paste0(x, "'s defensive location can't be determined. poss.location is NA"))
}
}
x <- x + 1
}
df$poss.action <- as.character(df$poss.action)
e <- 1
while (e <= max(df$event)) {
# get row for "poss.action" for "event"
row <- grep(e,df[,"event"])[1]
# get event value and row for "poss.action" for next event
nextevent <- e + 1
nextrow <- grep(nextevent,df[,"event"])[1]
# checks these conditions which must be fulfilled for the pass attempt to be a completed pass
if(
# checks if the event is a pass attempt
grepl("pass", df[df[,"event"] == e,"poss.action"][1]) &&
# checks if the "poss.play.destination" value is blank and needs to be filled
is.na(df[row,"poss.play.destination"]) &&
# checks if the next event isn't a stop in play or break in broadcast
# these instances should have the "poss.play.destination" value filled in anyways
!grepl("playcutoffbybroadcast|offside|stoppage|
substitution|halftime|fulltime|end.of", df[nextrow,"poss.action"]) &&
# checks if next event isn't a lost aerial duel
!grepl("aerial.lost", df[nextrow, "poss.action"]) &&
# checks if next event, which shouldn't be a lost aerial duel, has the same team as the possessing team
df[row,"poss.team"] == df[nextrow,"poss.team"] &&
# if the above conditions are satisfied, check "def.action" to make sure it does not
# include defensive actions that would still indicate an unsuccessful pass attempt
!grepl("interceptions|blocks|clearances|shield|high.balls.won|smothers.won|loose.balls.won", df[df[,"event"] == e,"def.action"])
)
# if the previous test is passed, then it's a completed pass! Now, to determine the destination of the pass
{
# use location from the next event as
# the poss.play.destination value
df[row,"poss.play.destination"] <- df[nextrow, "poss.location"]
# one last thing, add a ".c" to the end of the "poss.action" value to signify that it's a completed pass
string <- df[row,"poss.action"]
df[row,"poss.action"] <- paste0(string, ".c")
# move on to the next event
e <- e + 1
}
# if the previous test is not passed, then the event is not a completed pass
# move on to the next event
else {
e <- e + 1
}
}
rm(opposites, awayplayers, homeplayers, deflocations, location, awayteam, hometeam, posslocations, teams)
View(df)
setwd("~/Desktop/wosostats testbed/source/csv")
match
setwd("~/Desktop/wosostats testbed/source/csv/feminine-d1-2015-2016")
write.csv(df, file="2015-2016-feminine-d1-psg-lyon-020516.csv", row.names=FALSE)
match
setwd("~/Desktop/wosostats testbed/source/excel/feminine-d1-2015-2016")
source('~/Desktop/wosostats testbed/code/version-2/tidy-excel.R')
View(df)
setwd("~/Desktop/wosostats testbed/source/csv/feminine-d1-2015-2016")
write.csv(df, file="2015-2016-feminine-d1-psg-lyon-020516.csv", row.names=FALSE)
match <- "2015-2016-feminine-d1-psg-lyon-020516.xlsx"
setwd("~/Desktop/wosostats testbed/source/excel/feminine-d1-2015-2016")
source('~/Desktop/wosostats testbed/code/version-2/tidy-excel.R')
setwd("~/Desktop/wosostats testbed/source/csv/feminine-d1-2015-2016")
write.csv(df, file="2015-2016-feminine-d1-psg-lyon-020516.csv", row.names=FALSE)
library(plyr)
library(dplyr)
require(RCurl)
d <- getURL("https://raw.githubusercontent.com/amj2012/wosostats/master/source/csv/feminine-d1-2015-2016/2015-2016-feminine-d1-psg-lyon-020516.csv")
d <- read.csv(textConnection(d))
## Change relevant columns to character type
d$poss.position <- as.character(d$poss.position)
d$poss.team <- as.character(d$poss.team)
d$poss.player <- as.character(d$poss.player)
d$poss.action <- as.character(d$poss.action)
d$poss.location <- as.character(d$poss.location)
d$poss.play.destination <- as.character(d$poss.play.destination)
d$play.type <- as.character(d$play.type)
d$def.position <- as.character(d$def.position)
d$def.team <- as.character(d$def.team)
d$def.player <- as.character(d$def.player)
d$def.action <- as.character(d$def.action)
d$def.location <- as.character(d$def.location)
d$gk.ball.stop <- as.character(d$gk.ball.stop)
d$gk.s.o.g.attempt <- as.character(d$gk.s.o.g.attempt)
d$poss.player.disciplinary <- as.character(d$poss.player.disciplinary)
d$poss.notes <- as.character(d$poss.notes)
d$def.player.disciplinary <- as.character(d$def.player.disciplinary)
d$def.notes <- as.character(d$def.notes)
source("https://raw.githubusercontent.com/amj2012/woso-stats/master/code/version-2/analysis-functions.R")
t <- createDataFrame(c("interceptions"), "def.action", d)
t <- t[t[,"def.action"] == "interceptions",c("event","time","def.position", "def.team",
"def.player",	"def.action",	"def.location",
"gk.ball.stop",	"gk.s.o.g.attempt",	"poss.player.disciplinary",
"poss.notes",	"def.player.disciplinary",	"def.notes")]
t$poss.player <- t$def.player
t2 <- createTable(c("interceptions"), "def.location", t)
View(t2)
View(t)
table?
x
t <- createDataFrame(c("interceptions"), "def.action", d)
t <- t[t[,"def.action"] == "interceptions",c("event","time","def.position", "def.team",
"def.player",	"def.action",	"def.location",
"gk.ball.stop",	"gk.s.o.g.attempt",	"poss.player.disciplinary",
"poss.notes",	"def.player.disciplinary",	"def.notes")]
t$poss.player <- t$def.player
t2 <- createTable(c("def.team" ,"interceptions"), "def.location", t)
View(t2)
t <- createDataFrame(c("interceptions"), "def.action", d)
t <- t[t[,"def.action"] == "interceptions",c("event","time","def.position", "def.team",
"def.player",	"def.action",	"def.location",
"gk.ball.stop",	"gk.s.o.g.attempt",	"poss.player.disciplinary",
"poss.notes",	"def.player.disciplinary",	"def.notes")]
t$poss.player <- t$def.player
t2 <- createTable(c("interceptions", "def.team"), "def.location", t)
View(t2)
t <- createDataFrame(c("clearances", "ball.shield", "blocks", "interceptions"), "def.action", d)
t <- t[,c("event","time", "def.position","def.team","def.player","def.action","def.location", "def.player.disciplinary","def.notes")]
names(t) <- c("event", "time", "position","team", "poss.player", "player.event", "location",
"def.player.disciplinary", "def.notes")
t2 <- createTable(c("interceptions","blocks", "clearances", "ball.shield"), "player.event", t)
t2 <- t2[order(-t2$blocks),]
names(t2) <- c("Interceptions","Blocks","Clearances", "Balls Shielded")
print(t2, digits=2)
t <- createDataFrame(c("clearances", "ball.shield", "blocks", "interceptions"), "def.action", d)
t <- t[,c("event","time", "def.position","def.team","def.player","def.action","def.location", "def.player.disciplinary","def.notes")]
names(t) <- c("event", "time", "position","team", "poss.player", "player.event", "location",
"def.player.disciplinary", "def.notes")
t2 <- createTable(c("interceptions","blocks", "clearances", "ball.shield"), "player.event", t)
t2 <- t2[order(-t2$interceptions),]
names(t2) <- c("Interceptions","Blocks","Clearances", "Balls Shielded")
print(t2, digits=2)
t <- createDataFrame(c("clearances", "ball.shield", "blocks", "interceptions"), "def.action", d)
t <- t[,c("event","time", "def.position","def.team","def.player","def.action","def.location", "def.player.disciplinary","def.notes")]
names(t) <- c("event", "time", "position","team", "poss.player", "player.event", "location",
"def.player.disciplinary", "def.notes")
t2 <- createTable(c("interceptions","blocks", "clearances", "ball.shield"), "player.event", t)
t2 <- t2[order(-t2$interceptions, -t2$blocks),]
names(t2) <- c("Interceptions","Blocks","Clearances", "Balls Shielded")
print(t2, digits=2)
t <- createDataFrame(c("clearances", "ball.shield", "blocks", "interceptions"), "def.action", d)
t <- t[,c("event","time", "def.position","def.team","def.player","def.action","def.location", "def.player.disciplinary","def.notes")]
names(t) <- c("event", "time", "position","team", "poss.player", "player.event", "location",
"def.player.disciplinary", "def.notes")
t2 <- createTable(c("interceptions","blocks", "clearances", "ball.shield"), "player.event", t)
t2 <- t2[order(-t2$interceptions, -t2$blocks, =t2$clearances),]
names(t2) <- c("Interceptions","Blocks","Clearances", "Balls Shielded")
print(t2, digits=2)
t <- createDataFrame(c("clearances", "ball.shield", "blocks", "interceptions"), "def.action", d)
t <- t[,c("event","time", "def.position","def.team","def.player","def.action","def.location", "def.player.disciplinary","def.notes")]
names(t) <- c("event", "time", "position","team", "poss.player", "player.event", "location",
"def.player.disciplinary", "def.notes")
t2 <- createTable(c("interceptions","blocks", "clearances", "ball.shield"), "player.event", t)
t2 <- t2[order(-t2$interceptions, -t2$blocks, -t2$clearances),]
names(t2) <- c("Interceptions","Blocks","Clearances", "Balls Shielded")
print(t2, digits=2)
t <- createDataFrame(c("recoveries", "interceptions"), "poss.action", d)
t2 <- createTable(c("recoveries", "interceptions"), "poss.location", t)
## Fill in blanks
t2 <- t2[order(-t2$Interceptions, -t2$recoveries),]
names(t2) <- c("Interceptions", "Recoveries")
print(t2, digits=2)
View(createDataFrame)
View(createDataFrame)
View(createTable)
View(createTable)
t <- createDataFrame(c("recoveries"), "poss.action", d)
View(t)
t2 <- createTable(c("recoveries"), "poss.location", t)
View(t2)
View(createTable)
table(t$poss.player, t$poss.action)
t <- createDataFrame(c("recoveries"), "poss.action", d)
t2 <- data.frame(unclass(table(t$poss.player, t$poss.action)))
View(t2)
t2[order(-t2$recoveries),]
names(t2)
t2[order(-t2$recoveries),]
t2
t <- createDataFrame(c("recoveries"), "poss.action", d)
t2 <- data.frame(unclass(table(t$poss.player, t$poss.action)))
## Fill in blanks
names(t2) <- c("Recoveries")
print(t2, digits=2)
